{"fullyEncodeReservedExpansion" true, "protocol" "rest", "schemas" {"Post" {"type" "object", "id" "Post", "properties" {"readerComments" {"type" "string", "enumDescriptions" ["" "" ""], "description" "Comment control and display setting for readers of this post.", "enum" ["ALLOW" "DONT_ALLOW_SHOW_EXISTING" "DONT_ALLOW_HIDE_EXISTING"]}, "trashed" {"type" "string", "description" "RFC 3339 date-time when this Post was last trashed."}, "url" {"description" "The URL where this Post is displayed.", "type" "string"}, "customMetaData" {"description" "The JSON meta-data for the Post.", "type" "string"}, "author" {"type" "object", "description" "The author of this Post.", "properties" {"id" {"type" "string", "description" "The identifier of the creator."}, "url" {"description" "The URL of the creator's Profile page.", "type" "string"}, "image" {"type" "object", "properties" {"url" {"description" "The creator's avatar URL.", "type" "string"}}, "description" "The creator's avatar."}, "displayName" {"type" "string", "description" "The display name."}}}, "id" {"type" "string", "description" "The identifier of this Post."}, "titleLink" {"type" "string", "description" "The title link URL, similar to atom's related link."}, "labels" {"type" "array", "items" {"type" "string"}, "description" "The list of labels this Post was tagged with."}, "published" {"description" "RFC 3339 date-time when this Post was published.", "type" "string"}, "location" {"properties" {"lng" {"description" "Location's longitude.", "format" "double", "type" "number"}, "name" {"type" "string", "description" "Location name."}, "span" {"description" "Location's viewport span. Can be used when rendering a map preview.", "type" "string"}, "lat" {"format" "double", "description" "Location's latitude.", "type" "number"}}, "description" "The location for geotagged posts.", "type" "object"}, "blog" {"type" "object", "description" "Data about the blog containing this Post.", "properties" {"id" {"type" "string", "description" "The identifier of the Blog that contains this Post."}}}, "status" {"description" "Status of the post. Only set for admin-level requests.", "type" "string", "enumDescriptions" ["" "" "" ""], "enum" ["LIVE" "DRAFT" "SCHEDULED" "SOFT_TRASHED"]}, "selfLink" {"description" "The API REST URL to fetch this resource from.", "type" "string"}, "content" {"description" "The content of the Post. May contain HTML markup.", "type" "string"}, "etag" {"type" "string", "description" "Etag of the resource."}, "kind" {"description" "The kind of this entity. Always blogger#post.", "type" "string"}, "title" {"type" "string", "description" "The title of the Post."}, "images" {"type" "array", "description" "Display image for the Post.", "items" {"type" "object", "properties" {"url" {"type" "string"}}}}, "replies" {"type" "object", "properties" {"selfLink" {"description" "The URL of the comments on this post.", "type" "string"}, "items" {"items" {"$ref" "Comment"}, "description" "The List of Comments for this Post.", "type" "array"}, "totalItems" {"type" "string", "description" "The count of comments on this post.", "format" "int64"}}, "description" "The container of comments on this Post."}, "updated" {"type" "string", "description" "RFC 3339 date-time when this Post was last updated."}}}, "Comment" {"id" "Comment", "properties" {"inReplyTo" {"description" "Data about the comment this is in reply to.", "properties" {"id" {"type" "string", "description" "The identified of the parent of this comment."}}, "type" "object"}, "author" {"properties" {"displayName" {"description" "The display name.", "type" "string"}, "url" {"description" "The URL of the creator's Profile page.", "type" "string"}, "image" {"description" "The creator's avatar.", "type" "object", "properties" {"url" {"type" "string", "description" "The creator's avatar URL."}}}, "id" {"type" "string", "description" "The identifier of the creator."}}, "type" "object", "description" "The author of this Comment."}, "id" {"type" "string", "description" "The identifier for this resource."}, "post" {"description" "Data about the post containing this comment.", "properties" {"id" {"type" "string", "description" "The identifier of the post containing this comment."}}, "type" "object"}, "published" {"type" "string", "description" "RFC 3339 date-time when this comment was published."}, "blog" {"type" "object", "description" "Data about the blog containing this comment.", "properties" {"id" {"type" "string", "description" "The identifier of the blog containing this comment."}}}, "status" {"description" "The status of the comment (only populated for admin users).", "type" "string", "enumDescriptions" ["" "" "" ""], "enum" ["LIVE" "EMPTIED" "PENDING" "SPAM"]}, "selfLink" {"type" "string", "description" "The API REST URL to fetch this resource from."}, "content" {"type" "string", "description" "The actual content of the comment. May include HTML markup."}, "kind" {"type" "string", "description" "The kind of this entry. Always blogger#comment."}, "updated" {"description" "RFC 3339 date-time when this comment was last updated.", "type" "string"}}, "type" "object"}, "BlogPerUserInfo" {"id" "BlogPerUserInfo", "type" "object", "properties" {"role" {"enum" ["VIEW_TYPE_UNSPECIFIED" "READER" "AUTHOR" "ADMIN"], "type" "string", "enumDescriptions" ["" "" "" ""], "description" "Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER)."}, "hasAdminAccess" {"description" "True if the user has Admin level access to the blog.", "type" "boolean"}, "blogId" {"description" "ID of the Blog resource.", "type" "string"}, "kind" {"description" "The kind of this entity. Always blogger#blogPerUserInfo.", "type" "string"}, "photosAlbumKey" {"type" "string", "description" "The Photo Album Key for the user when adding photos to the blog."}, "userId" {"description" "ID of the User.", "type" "string"}}}, "BlogUserInfo" {"id" "BlogUserInfo", "properties" {"blog_user_info" {"description" "Information about a User for the Blog.", "$ref" "BlogPerUserInfo"}, "blog" {"$ref" "Blog", "description" "The Blog resource."}, "kind" {"type" "string", "description" "The kind of this entity. Always blogger#blogUserInfo."}}, "type" "object"}, "User" {"properties" {"created" {"type" "string", "description" "The timestamp of when this profile was created, in seconds since epoch."}, "url" {"type" "string", "description" "The user's profile page."}, "blogs" {"description" "The container of blogs for this user.", "type" "object", "properties" {"selfLink" {"type" "string", "description" "The URL of the Blogs for this user."}}}, "displayName" {"type" "string", "description" "The display name."}, "about" {"description" "Profile summary information.", "type" "string"}, "id" {"type" "string", "description" "The identifier for this User."}, "locale" {"properties" {"variant" {"type" "string", "description" "The language variant this blog is authored in."}, "country" {"type" "string", "description" "The country this blog's locale is set to."}, "language" {"type" "string", "description" "The language this blog is authored in."}}, "type" "object", "description" "This user's locale"}, "selfLink" {"type" "string", "description" "The API REST URL to fetch this resource from."}, "kind" {"description" "The kind of this entity. Always blogger#user.", "type" "string"}}, "id" "User", "type" "object"}, "CommentList" {"properties" {"prevPageToken" {"type" "string", "description" "Pagination token to fetch the previous page, if one exists."}, "etag" {"description" "Etag of the response.", "type" "string"}, "nextPageToken" {"description" "Pagination token to fetch the next page, if one exists.", "type" "string"}, "items" {"items" {"$ref" "Comment"}, "type" "array", "description" "The List of Comments for a Post."}, "kind" {"type" "string", "description" "The kind of this entry. Always blogger#commentList."}}, "id" "CommentList", "type" "object"}, "PostUserInfo" {"properties" {"post_user_info" {"$ref" "PostPerUserInfo", "description" "Information about a User for the Post."}, "kind" {"type" "string", "description" "The kind of this entity. Always blogger#postUserInfo."}, "post" {"$ref" "Post", "description" "The Post resource."}}, "type" "object", "id" "PostUserInfo"}, "PostPerUserInfo" {"properties" {"blogId" {"type" "string", "description" "ID of the Blog that the post resource belongs to."}, "userId" {"type" "string", "description" "ID of the User."}, "kind" {"type" "string", "description" "The kind of this entity. Always blogger#postPerUserInfo."}, "postId" {"description" "ID of the Post resource.", "type" "string"}, "hasEditAccess" {"type" "boolean", "description" "True if the user has Author level access to the post."}}, "type" "object", "id" "PostPerUserInfo"}, "Blog" {"properties" {"url" {"type" "string", "description" "The URL where this blog is published."}, "pages" {"description" "The container of pages in this blog.", "type" "object", "properties" {"selfLink" {"description" "The URL of the container for pages in this blog.", "type" "string"}, "totalItems" {"type" "integer", "description" "The count of pages in this blog.", "format" "int32"}}}, "customMetaData" {"description" "The JSON custom meta-data for the Blog.", "type" "string"}, "id" {"description" "The identifier for this resource.", "type" "string"}, "name" {"type" "string", "description" "The name of this blog. This is displayed as the title."}, "locale" {"description" "The locale this Blog is set to.", "type" "object", "properties" {"language" {"description" "The language this blog is authored in.", "type" "string"}, "variant" {"description" "The language variant this blog is authored in.", "type" "string"}, "country" {"description" "The country this blog's locale is set to.", "type" "string"}}}, "published" {"type" "string", "description" "RFC 3339 date-time when this blog was published."}, "status" {"type" "string", "enum" ["LIVE" "DELETED"], "description" "The status of the blog.", "enumDescriptions" ["" ""]}, "posts" {"properties" {"totalItems" {"description" "The count of posts in this blog.", "type" "integer", "format" "int32"}, "selfLink" {"type" "string", "description" "The URL of the container for posts in this blog."}, "items" {"type" "array", "items" {"$ref" "Post"}, "description" "The List of Posts for this Blog."}}, "description" "The container of posts in this blog.", "type" "object"}, "selfLink" {"type" "string", "description" "The API REST URL to fetch this resource from."}, "kind" {"type" "string", "description" "The kind of this entry. Always blogger#blog."}, "updated" {"description" "RFC 3339 date-time when this blog was last updated.", "type" "string"}, "description" {"type" "string", "description" "The description of this blog. This is displayed underneath the title."}}, "id" "Blog", "type" "object"}, "Page" {"properties" {"trashed" {"type" "string", "description" "RFC 3339 date-time when this Page was trashed."}, "url" {"description" "The URL that this Page is displayed at.", "type" "string"}, "author" {"type" "object", "properties" {"id" {"type" "string", "description" "The identifier of the creator."}, "url" {"type" "string", "description" "The URL of the creator's Profile page."}, "displayName" {"type" "string", "description" "The display name."}, "image" {"properties" {"url" {"description" "The creator's avatar URL.", "type" "string"}}, "description" "The creator's avatar.", "type" "object"}}, "description" "The author of this Page."}, "id" {"description" "The identifier for this resource.", "type" "string"}, "published" {"description" "RFC 3339 date-time when this Page was published.", "type" "string"}, "blog" {"type" "object", "description" "Data about the blog containing this Page.", "properties" {"id" {"type" "string", "description" "The identifier of the blog containing this page."}}}, "status" {"description" "The status of the page for admin resources (either LIVE or DRAFT).", "enumDescriptions" ["" "" ""], "type" "string", "enum" ["LIVE" "DRAFT" "SOFT_TRASHED"]}, "selfLink" {"description" "The API REST URL to fetch this resource from.", "type" "string"}, "content" {"type" "string", "description" "The body content of this Page, in HTML."}, "etag" {"description" "Etag of the resource.", "type" "string"}, "kind" {"description" "The kind of this entity. Always blogger#page.", "type" "string"}, "title" {"description" "The title of this entity. This is the name displayed in the Admin user interface.", "type" "string"}, "updated" {"type" "string", "description" "RFC 3339 date-time when this Page was last updated."}}, "type" "object", "id" "Page"}, "BlogList" {"properties" {"blogUserInfos" {"description" "Admin level list of blog per-user information.", "type" "array", "items" {"$ref" "BlogUserInfo"}}, "items" {"items" {"$ref" "Blog"}, "type" "array", "description" "The list of Blogs this user has Authorship or Admin rights over."}, "kind" {"type" "string", "description" "The kind of this entity. Always blogger#blogList."}}, "type" "object", "id" "BlogList"}, "PageList" {"id" "PageList", "properties" {"nextPageToken" {"description" "Pagination token to fetch the next page, if one exists.", "type" "string"}, "items" {"items" {"$ref" "Page"}, "type" "array", "description" "The list of Pages for a Blog."}, "kind" {"description" "The kind of this entity. Always blogger#pageList.", "type" "string"}, "etag" {"description" "Etag of the response.", "type" "string"}}, "type" "object"}, "PostUserInfosList" {"id" "PostUserInfosList", "type" "object", "properties" {"kind" {"description" "The kind of this entity. Always blogger#postList.", "type" "string"}, "items" {"items" {"$ref" "PostUserInfo"}, "type" "array", "description" "The list of Posts with User information for the post, for this Blog."}, "nextPageToken" {"type" "string", "description" "Pagination token to fetch the next page, if one exists."}}}, "Pageviews" {"id" "Pageviews", "type" "object", "properties" {"kind" {"type" "string", "description" "The kind of this entry. Always blogger#page_views."}, "counts" {"items" {"type" "object", "properties" {"timeRange" {"description" "Time range the given count applies to.", "enumDescriptions" ["" "" ""], "type" "string", "enum" ["ALL_TIME" "THIRTY_DAYS" "SEVEN_DAYS"]}, "count" {"type" "string", "format" "int64", "description" "Count of page views for the given time range."}}}, "description" "The container of posts in this blog.", "type" "array"}, "blogId" {"description" "Blog Id.", "type" "string"}}}, "PostList" {"id" "PostList", "type" "object", "properties" {"items" {"description" "The list of Posts for this Blog.", "items" {"$ref" "Post"}, "type" "array"}, "kind" {"type" "string", "description" "The kind of this entity. Always blogger#postList."}, "etag" {"description" "Etag of the response.", "type" "string"}, "prevPageToken" {"type" "string", "description" "Pagination token to fetch the previous page, if one exists."}, "nextPageToken" {"type" "string", "description" "Pagination token to fetch the next page, if one exists."}}}}, "documentationLink" "https://developers.google.com/blogger/docs/3.0/getting_started", "batchPath" "batch", "basePath" "", "discoveryVersion" "v1", "servicePath" "", "rootUrl" "https://blogger.googleapis.com/", "ownerName" "Google", "auth" {"oauth2" {"scopes" {"https://www.googleapis.com/auth/blogger" {"description" "Manage your Blogger account"}, "https://www.googleapis.com/auth/blogger.readonly" {"description" "View your Blogger account"}}}}, "id" "blogger:v3", "revision" "20240711", "mtlsRootUrl" "https://blogger.mtls.googleapis.com/", "icons" {"x32" "http://www.google.com/images/icons/product/search-32.gif", "x16" "http://www.google.com/images/icons/product/search-16.gif"}, "name" "blogger", "ownerDomain" "google.com", "baseUrl" "https://blogger.googleapis.com/", "kind" "discovery#restDescription", "title" "Blogger API", "version" "v3", "canonicalName" "Blogger", "parameters" {"callback" {"type" "string", "description" "JSONP", "location" "query"}, "uploadType" {"location" "query", "description" "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "type" "string"}, "key" {"location" "query", "description" "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "type" "string"}, "access_token" {"description" "OAuth access token.", "type" "string", "location" "query"}, "oauth_token" {"location" "query", "type" "string", "description" "OAuth 2.0 token for the current user."}, "prettyPrint" {"default" "true", "type" "boolean", "location" "query", "description" "Returns response with indentations and line breaks."}, "alt" {"enum" ["json" "media" "proto"], "type" "string", "default" "json", "location" "query", "enumDescriptions" ["Responses with Content-Type of application/json" "Media download with context-dependent Content-Type" "Responses with Content-Type of application/x-protobuf"], "description" "Data format for response."}, "$.xgafv" {"enumDescriptions" ["v1 error format" "v2 error format"], "enum" ["1" "2"], "type" "string", "location" "query", "description" "V1 error format."}, "fields" {"type" "string", "location" "query", "description" "Selector specifying which fields to include in a partial response."}, "upload_protocol" {"location" "query", "type" "string", "description" "Upload protocol for media (e.g. \"raw\", \"multipart\")."}, "quotaUser" {"location" "query", "description" "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", "type" "string"}}, "resources" {"pageViews" {"methods" {"get" {"path" "v3/blogs/{blogId}/pageviews", "id" "blogger.pageViews.get", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger"], "flatPath" "v3/blogs/{blogId}/pageviews", "response" {"$ref" "Pageviews"}, "parameters" {"range" {"location" "query", "enum" ["all" "30DAYS" "7DAYS"], "type" "string", "repeated" true, "enumDescriptions" ["" "" ""]}, "blogId" {"required" true, "type" "string", "location" "path"}}, "description" "Gets page views by blog id.", "parameterOrder" ["blogId"]}}}, "users" {"methods" {"get" {"path" "v3/users/{userId}", "id" "blogger.users.get", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger" "https://www.googleapis.com/auth/blogger.readonly"], "flatPath" "v3/users/{userId}", "response" {"$ref" "User"}, "parameters" {"userId" {"location" "path", "required" true, "type" "string"}}, "description" "Gets one user by user_id.", "parameterOrder" ["userId"]}}}, "pages" {"methods" {"update" {"path" "v3/blogs/{blogId}/pages/{pageId}", "id" "blogger.pages.update", "httpMethod" "PUT", "scopes" ["https://www.googleapis.com/auth/blogger"], "request" {"$ref" "Page"}, "flatPath" "v3/blogs/{blogId}/pages/{pageId}", "response" {"$ref" "Page"}, "parameters" {"publish" {"type" "boolean", "location" "query"}, "blogId" {"location" "path", "required" true, "type" "string"}, "pageId" {"required" true, "location" "path", "type" "string"}, "revert" {"type" "boolean", "location" "query"}}, "description" "Updates a page by blog id and page id.", "parameterOrder" ["blogId" "pageId"]}, "revert" {"path" "v3/blogs/{blogId}/pages/{pageId}/revert", "id" "blogger.pages.revert", "httpMethod" "POST", "scopes" ["https://www.googleapis.com/auth/blogger"], "flatPath" "v3/blogs/{blogId}/pages/{pageId}/revert", "response" {"$ref" "Page"}, "parameters" {"blogId" {"required" true, "location" "path", "type" "string"}, "pageId" {"type" "string", "location" "path", "required" true}}, "description" "Reverts a published or scheduled page to draft state.", "parameterOrder" ["blogId" "pageId"]}, "get" {"path" "v3/blogs/{blogId}/pages/{pageId}", "id" "blogger.pages.get", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger" "https://www.googleapis.com/auth/blogger.readonly"], "flatPath" "v3/blogs/{blogId}/pages/{pageId}", "response" {"$ref" "Page"}, "parameters" {"pageId" {"type" "string", "location" "path", "required" true}, "view" {"location" "query", "enumDescriptions" ["" "" "" ""], "enum" ["VIEW_TYPE_UNSPECIFIED" "READER" "AUTHOR" "ADMIN"], "type" "string"}, "blogId" {"location" "path", "type" "string", "required" true}}, "description" "Gets a page by blog id and page id.", "parameterOrder" ["blogId" "pageId"]}, "publish" {"path" "v3/blogs/{blogId}/pages/{pageId}/publish", "id" "blogger.pages.publish", "httpMethod" "POST", "scopes" ["https://www.googleapis.com/auth/blogger"], "flatPath" "v3/blogs/{blogId}/pages/{pageId}/publish", "response" {"$ref" "Page"}, "parameters" {"blogId" {"type" "string", "location" "path", "required" true}, "pageId" {"type" "string", "location" "path", "required" true}}, "description" "Publishes a page.", "parameterOrder" ["blogId" "pageId"]}, "list" {"path" "v3/blogs/{blogId}/pages", "id" "blogger.pages.list", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger" "https://www.googleapis.com/auth/blogger.readonly"], "flatPath" "v3/blogs/{blogId}/pages", "response" {"$ref" "PageList"}, "parameters" {"status" {"location" "query", "type" "string", "repeated" true, "enum" ["LIVE" "DRAFT" "SOFT_TRASHED"], "enumDescriptions" ["" "" ""]}, "maxResults" {"format" "uint32", "location" "query", "type" "integer"}, "view" {"type" "string", "enum" ["VIEW_TYPE_UNSPECIFIED" "READER" "AUTHOR" "ADMIN"], "location" "query", "enumDescriptions" ["" "" "" ""]}, "pageToken" {"location" "query", "type" "string"}, "fetchBodies" {"type" "boolean", "location" "query"}, "blogId" {"type" "string", "required" true, "location" "path"}}, "description" "Lists pages.", "parameterOrder" ["blogId"]}, "patch" {"path" "v3/blogs/{blogId}/pages/{pageId}", "id" "blogger.pages.patch", "httpMethod" "PATCH", "scopes" ["https://www.googleapis.com/auth/blogger"], "request" {"$ref" "Page"}, "flatPath" "v3/blogs/{blogId}/pages/{pageId}", "response" {"$ref" "Page"}, "parameters" {"pageId" {"type" "string", "location" "path", "required" true}, "publish" {"location" "query", "type" "boolean"}, "revert" {"type" "boolean", "location" "query"}, "blogId" {"type" "string", "location" "path", "required" true}}, "description" "Patches a page.", "parameterOrder" ["blogId" "pageId"]}, "insert" {"path" "v3/blogs/{blogId}/pages", "id" "blogger.pages.insert", "httpMethod" "POST", "scopes" ["https://www.googleapis.com/auth/blogger"], "request" {"$ref" "Page"}, "flatPath" "v3/blogs/{blogId}/pages", "response" {"$ref" "Page"}, "parameters" {"isDraft" {"type" "boolean", "location" "query"}, "blogId" {"type" "string", "location" "path", "required" true}}, "description" "Inserts a page.", "parameterOrder" ["blogId"]}, "delete" {"httpMethod" "DELETE", "description" "Deletes a page by blog id and page id.", "scopes" ["https://www.googleapis.com/auth/blogger"], "id" "blogger.pages.delete", "parameters" {"pageId" {"location" "path", "type" "string", "required" true}, "blogId" {"required" true, "location" "path", "type" "string"}, "useTrash" {"type" "boolean", "location" "query", "description" "Move to Trash if possible"}}, "path" "v3/blogs/{blogId}/pages/{pageId}", "parameterOrder" ["blogId" "pageId"], "flatPath" "v3/blogs/{blogId}/pages/{pageId}"}}}, "blogUserInfos" {"methods" {"get" {"path" "v3/users/{userId}/blogs/{blogId}", "id" "blogger.blogUserInfos.get", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger" "https://www.googleapis.com/auth/blogger.readonly"], "flatPath" "v3/users/{userId}/blogs/{blogId}", "response" {"$ref" "BlogUserInfo"}, "parameters" {"maxPosts" {"type" "integer", "location" "query", "format" "uint32"}, "blogId" {"location" "path", "type" "string", "required" true}, "userId" {"type" "string", "location" "path", "required" true}}, "description" "Gets one blog and user info pair by blog id and user id.", "parameterOrder" ["userId" "blogId"]}}}, "comments" {"methods" {"delete" {"httpMethod" "DELETE", "description" "Deletes a comment by blog id, post id and comment id.", "id" "blogger.comments.delete", "flatPath" "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}", "parameterOrder" ["blogId" "postId" "commentId"], "path" "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}", "scopes" ["https://www.googleapis.com/auth/blogger"], "parameters" {"blogId" {"required" true, "type" "string", "location" "path"}, "commentId" {"location" "path", "type" "string", "required" true}, "postId" {"location" "path", "type" "string", "required" true}}}, "markAsSpam" {"path" "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/spam", "id" "blogger.comments.markAsSpam", "httpMethod" "POST", "scopes" ["https://www.googleapis.com/auth/blogger"], "flatPath" "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/spam", "response" {"$ref" "Comment"}, "parameters" {"blogId" {"required" true, "type" "string", "location" "path"}, "commentId" {"location" "path", "required" true, "type" "string"}, "postId" {"required" true, "location" "path", "type" "string"}}, "description" "Marks a comment as spam by blog id, post id and comment id.", "parameterOrder" ["blogId" "postId" "commentId"]}, "removeContent" {"path" "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent", "id" "blogger.comments.removeContent", "httpMethod" "POST", "scopes" ["https://www.googleapis.com/auth/blogger"], "flatPath" "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent", "response" {"$ref" "Comment"}, "parameters" {"blogId" {"type" "string", "required" true, "location" "path"}, "commentId" {"required" true, "location" "path", "type" "string"}, "postId" {"location" "path", "type" "string", "required" true}}, "description" "Removes the content of a comment by blog id, post id and comment id.", "parameterOrder" ["blogId" "postId" "commentId"]}, "list" {"path" "v3/blogs/{blogId}/posts/{postId}/comments", "id" "blogger.comments.list", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger" "https://www.googleapis.com/auth/blogger.readonly"], "flatPath" "v3/blogs/{blogId}/posts/{postId}/comments", "response" {"$ref" "CommentList"}, "parameters" {"pageToken" {"type" "string", "location" "query"}, "postId" {"required" true, "type" "string", "location" "path"}, "blogId" {"type" "string", "required" true, "location" "path"}, "startDate" {"type" "string", "location" "query"}, "maxResults" {"format" "uint32", "location" "query", "type" "integer"}, "status" {"enum" ["LIVE" "EMPTIED" "PENDING" "SPAM"], "location" "query", "enumDescriptions" ["" "" "" ""], "type" "string"}, "fetchBodies" {"location" "query", "type" "boolean"}, "view" {"location" "query", "type" "string", "enumDescriptions" ["" "" "" ""], "enum" ["VIEW_TYPE_UNSPECIFIED" "READER" "AUTHOR" "ADMIN"]}, "endDate" {"location" "query", "type" "string"}}, "description" "Lists comments.", "parameterOrder" ["blogId" "postId"]}, "listByBlog" {"path" "v3/blogs/{blogId}/comments", "id" "blogger.comments.listByBlog", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger" "https://www.googleapis.com/auth/blogger.readonly"], "flatPath" "v3/blogs/{blogId}/comments", "response" {"$ref" "CommentList"}, "parameters" {"fetchBodies" {"location" "query", "type" "boolean"}, "startDate" {"location" "query", "type" "string"}, "maxResults" {"format" "uint32", "type" "integer", "location" "query"}, "blogId" {"location" "path", "type" "string", "required" true}, "endDate" {"type" "string", "location" "query"}, "pageToken" {"location" "query", "type" "string"}, "status" {"repeated" true, "enum" ["LIVE" "EMPTIED" "PENDING" "SPAM"], "enumDescriptions" ["" "" "" ""], "location" "query", "type" "string"}}, "description" "Lists comments by blog.", "parameterOrder" ["blogId"]}, "get" {"path" "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}", "id" "blogger.comments.get", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger" "https://www.googleapis.com/auth/blogger.readonly"], "flatPath" "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}", "response" {"$ref" "Comment"}, "parameters" {"blogId" {"type" "string", "required" true, "location" "path"}, "commentId" {"location" "path", "type" "string", "required" true}, "postId" {"required" true, "type" "string", "location" "path"}, "view" {"location" "query", "enumDescriptions" ["" "" "" ""], "type" "string", "enum" ["VIEW_TYPE_UNSPECIFIED" "READER" "AUTHOR" "ADMIN"]}}, "description" "Gets a comment by id.", "parameterOrder" ["blogId" "postId" "commentId"]}, "approve" {"path" "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/approve", "id" "blogger.comments.approve", "httpMethod" "POST", "scopes" ["https://www.googleapis.com/auth/blogger"], "flatPath" "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/approve", "response" {"$ref" "Comment"}, "parameters" {"commentId" {"required" true, "type" "string", "location" "path"}, "postId" {"type" "string", "required" true, "location" "path"}, "blogId" {"type" "string", "location" "path", "required" true}}, "description" "Marks a comment as not spam by blog id, post id and comment id.", "parameterOrder" ["blogId" "postId" "commentId"]}}}, "postUserInfos" {"methods" {"get" {"path" "v3/users/{userId}/blogs/{blogId}/posts/{postId}", "id" "blogger.postUserInfos.get", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger" "https://www.googleapis.com/auth/blogger.readonly"], "flatPath" "v3/users/{userId}/blogs/{blogId}/posts/{postId}", "response" {"$ref" "PostUserInfo"}, "parameters" {"postId" {"required" true, "type" "string", "location" "path"}, "userId" {"location" "path", "type" "string", "required" true}, "blogId" {"required" true, "type" "string", "location" "path"}, "maxComments" {"type" "integer", "location" "query", "format" "uint32"}}, "description" "Gets one post and user info pair, by post_id and user_id.", "parameterOrder" ["userId" "blogId" "postId"]}, "list" {"path" "v3/users/{userId}/blogs/{blogId}/posts", "id" "blogger.postUserInfos.list", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger" "https://www.googleapis.com/auth/blogger.readonly"], "flatPath" "v3/users/{userId}/blogs/{blogId}/posts", "response" {"$ref" "PostUserInfosList"}, "parameters" {"pageToken" {"type" "string", "location" "query"}, "blogId" {"type" "string", "required" true, "location" "path"}, "startDate" {"type" "string", "location" "query"}, "maxResults" {"location" "query", "format" "uint32", "type" "integer"}, "labels" {"type" "string", "location" "query"}, "orderBy" {"type" "string", "location" "query", "enum" ["ORDER_BY_UNSPECIFIED" "PUBLISHED" "UPDATED"], "enumDescriptions" ["" "" ""], "default" "PUBLISHED"}, "userId" {"location" "path", "required" true, "type" "string"}, "status" {"location" "query", "type" "string", "enum" ["LIVE" "DRAFT" "SCHEDULED" "SOFT_TRASHED"], "repeated" true, "enumDescriptions" ["" "" "" ""]}, "fetchBodies" {"default" "false", "type" "boolean", "location" "query"}, "view" {"enumDescriptions" ["" "" "" ""], "location" "query", "type" "string", "enum" ["VIEW_TYPE_UNSPECIFIED" "READER" "AUTHOR" "ADMIN"]}, "endDate" {"location" "query", "type" "string"}}, "description" "Lists post and user info pairs.", "parameterOrder" ["userId" "blogId"]}}}, "blogs" {"methods" {"listByUser" {"path" "v3/users/{userId}/blogs", "id" "blogger.blogs.listByUser", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger" "https://www.googleapis.com/auth/blogger.readonly"], "flatPath" "v3/users/{userId}/blogs", "response" {"$ref" "BlogList"}, "parameters" {"view" {"enum" ["VIEW_TYPE_UNSPECIFIED" "READER" "AUTHOR" "ADMIN"], "type" "string", "enumDescriptions" ["" "" "" ""], "location" "query"}, "fetchUserInfo" {"location" "query", "type" "boolean"}, "role" {"type" "string", "enumDescriptions" ["" "" "" ""], "repeated" true, "enum" ["VIEW_TYPE_UNSPECIFIED" "READER" "AUTHOR" "ADMIN"], "location" "query"}, "status" {"type" "string", "description" "Default value of status is LIVE.", "location" "query", "default" "LIVE", "enum" ["LIVE" "DELETED"], "enumDescriptions" ["" ""], "repeated" true}, "userId" {"type" "string", "location" "path", "required" true}}, "description" "Lists blogs by user.", "parameterOrder" ["userId"]}, "getByUrl" {"path" "v3/blogs/byurl", "id" "blogger.blogs.getByUrl", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger" "https://www.googleapis.com/auth/blogger.readonly"], "flatPath" "v3/blogs/byurl", "response" {"$ref" "Blog"}, "parameters" {"view" {"location" "query", "type" "string", "enumDescriptions" ["" "" "" ""], "enum" ["VIEW_TYPE_UNSPECIFIED" "READER" "AUTHOR" "ADMIN"]}, "url" {"type" "string", "location" "query", "required" true}}, "description" "Gets a blog by url.", "parameterOrder" ["url"]}, "get" {"path" "v3/blogs/{blogId}", "id" "blogger.blogs.get", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger" "https://www.googleapis.com/auth/blogger.readonly"], "flatPath" "v3/blogs/{blogId}", "response" {"$ref" "Blog"}, "parameters" {"view" {"location" "query", "type" "string", "enum" ["VIEW_TYPE_UNSPECIFIED" "READER" "AUTHOR" "ADMIN"], "enumDescriptions" ["" "" "" ""]}, "blogId" {"required" true, "location" "path", "type" "string"}, "maxPosts" {"format" "uint32", "location" "query", "type" "integer"}}, "description" "Gets a blog by id.", "parameterOrder" ["blogId"]}}}, "posts" {"methods" {"revert" {"path" "v3/blogs/{blogId}/posts/{postId}/revert", "id" "blogger.posts.revert", "httpMethod" "POST", "scopes" ["https://www.googleapis.com/auth/blogger"], "flatPath" "v3/blogs/{blogId}/posts/{postId}/revert", "response" {"$ref" "Post"}, "parameters" {"postId" {"required" true, "type" "string", "location" "path"}, "blogId" {"location" "path", "required" true, "type" "string"}}, "description" "Reverts a published or scheduled post to draft state.", "parameterOrder" ["blogId" "postId"]}, "list" {"path" "v3/blogs/{blogId}/posts", "id" "blogger.posts.list", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger" "https://www.googleapis.com/auth/blogger.readonly"], "flatPath" "v3/blogs/{blogId}/posts", "response" {"$ref" "PostList"}, "parameters" {"fetchImages" {"location" "query", "type" "boolean"}, "pageToken" {"type" "string", "location" "query"}, "blogId" {"location" "path", "required" true, "type" "string"}, "startDate" {"type" "string", "location" "query"}, "maxResults" {"location" "query", "format" "uint32", "type" "integer"}, "labels" {"type" "string", "location" "query"}, "orderBy" {"enumDescriptions" ["" "" ""], "location" "query", "enum" ["ORDER_BY_UNSPECIFIED" "PUBLISHED" "UPDATED"], "type" "string", "default" "PUBLISHED"}, "status" {"type" "string", "enum" ["LIVE" "DRAFT" "SCHEDULED" "SOFT_TRASHED"], "enumDescriptions" ["" "" "" ""], "location" "query", "repeated" true}, "sortOption" {"type" "string", "enum" ["SORT_OPTION_UNSPECIFIED" "DESCENDING" "ASCENDING"], "default" "DESCENDING", "enumDescriptions" ["The unspecified sort option." "The option to sort posts in descending order in time." "The option to sort posts in ascending order in time."], "location" "query", "description" "Sort direction applied to post list."}, "fetchBodies" {"default" "true", "type" "boolean", "location" "query"}, "view" {"location" "query", "type" "string", "enumDescriptions" ["" "" "" ""], "enum" ["VIEW_TYPE_UNSPECIFIED" "READER" "AUTHOR" "ADMIN"]}, "endDate" {"type" "string", "location" "query"}}, "description" "Lists posts.", "parameterOrder" ["blogId"]}, "delete" {"path" "v3/blogs/{blogId}/posts/{postId}", "id" "blogger.posts.delete", "parameters" {"useTrash" {"location" "query", "description" "Move to Trash if possible", "type" "boolean"}, "postId" {"type" "string", "required" true, "location" "path"}, "blogId" {"type" "string", "required" true, "location" "path"}}, "description" "Deletes a post by blog id and post id.", "httpMethod" "DELETE", "scopes" ["https://www.googleapis.com/auth/blogger"], "parameterOrder" ["blogId" "postId"], "flatPath" "v3/blogs/{blogId}/posts/{postId}"}, "getByPath" {"path" "v3/blogs/{blogId}/posts/bypath", "id" "blogger.posts.getByPath", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger" "https://www.googleapis.com/auth/blogger.readonly"], "flatPath" "v3/blogs/{blogId}/posts/bypath", "response" {"$ref" "Post"}, "parameters" {"path" {"type" "string", "location" "query", "required" true}, "view" {"location" "query", "type" "string", "enum" ["VIEW_TYPE_UNSPECIFIED" "READER" "AUTHOR" "ADMIN"], "enumDescriptions" ["" "" "" ""]}, "maxComments" {"location" "query", "type" "integer", "format" "uint32"}, "blogId" {"location" "path", "required" true, "type" "string"}}, "description" "Gets a post by path.", "parameterOrder" ["blogId" "path"]}, "update" {"path" "v3/blogs/{blogId}/posts/{postId}", "id" "blogger.posts.update", "httpMethod" "PUT", "scopes" ["https://www.googleapis.com/auth/blogger"], "request" {"$ref" "Post"}, "flatPath" "v3/blogs/{blogId}/posts/{postId}", "response" {"$ref" "Post"}, "parameters" {"blogId" {"required" true, "type" "string", "location" "path"}, "revert" {"location" "query", "type" "boolean"}, "maxComments" {"type" "integer", "format" "uint32", "location" "query"}, "fetchImages" {"type" "boolean", "location" "query"}, "publish" {"type" "boolean", "location" "query"}, "fetchBody" {"default" "true", "location" "query", "type" "boolean"}, "postId" {"required" true, "location" "path", "type" "string"}}, "description" "Updates a post by blog id and post id.", "parameterOrder" ["blogId" "postId"]}, "patch" {"path" "v3/blogs/{blogId}/posts/{postId}", "id" "blogger.posts.patch", "httpMethod" "PATCH", "scopes" ["https://www.googleapis.com/auth/blogger"], "request" {"$ref" "Post"}, "flatPath" "v3/blogs/{blogId}/posts/{postId}", "response" {"$ref" "Post"}, "parameters" {"revert" {"type" "boolean", "location" "query"}, "blogId" {"required" true, "location" "path", "type" "string"}, "publish" {"type" "boolean", "location" "query"}, "fetchBody" {"type" "boolean", "default" "true", "location" "query"}, "fetchImages" {"type" "boolean", "location" "query"}, "postId" {"location" "path", "type" "string", "required" true}, "maxComments" {"type" "integer", "location" "query", "format" "uint32"}}, "description" "Patches a post.", "parameterOrder" ["blogId" "postId"]}, "publish" {"path" "v3/blogs/{blogId}/posts/{postId}/publish", "id" "blogger.posts.publish", "httpMethod" "POST", "scopes" ["https://www.googleapis.com/auth/blogger"], "flatPath" "v3/blogs/{blogId}/posts/{postId}/publish", "response" {"$ref" "Post"}, "parameters" {"publishDate" {"type" "string", "location" "query"}, "postId" {"location" "path", "required" true, "type" "string"}, "blogId" {"location" "path", "required" true, "type" "string"}}, "description" "Publishes a post.", "parameterOrder" ["blogId" "postId"]}, "insert" {"path" "v3/blogs/{blogId}/posts", "id" "blogger.posts.insert", "httpMethod" "POST", "scopes" ["https://www.googleapis.com/auth/blogger"], "request" {"$ref" "Post"}, "flatPath" "v3/blogs/{blogId}/posts", "response" {"$ref" "Post"}, "parameters" {"blogId" {"required" true, "location" "path", "type" "string"}, "fetchBody" {"type" "boolean", "location" "query", "default" "true"}, "isDraft" {"location" "query", "type" "boolean"}, "fetchImages" {"type" "boolean", "location" "query"}}, "description" "Inserts a post.", "parameterOrder" ["blogId"]}, "search" {"path" "v3/blogs/{blogId}/posts/search", "id" "blogger.posts.search", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger" "https://www.googleapis.com/auth/blogger.readonly"], "flatPath" "v3/blogs/{blogId}/posts/search", "response" {"$ref" "PostList"}, "parameters" {"orderBy" {"enum" ["ORDER_BY_UNSPECIFIED" "PUBLISHED" "UPDATED"], "location" "query", "type" "string", "enumDescriptions" ["" "" ""], "default" "PUBLISHED"}, "q" {"location" "query", "required" true, "type" "string"}, "fetchBodies" {"default" "true", "location" "query", "type" "boolean"}, "blogId" {"location" "path", "required" true, "type" "string"}}, "description" "Searches for posts matching given query terms in the specified blog.", "parameterOrder" ["blogId" "q"]}, "get" {"path" "v3/blogs/{blogId}/posts/{postId}", "id" "blogger.posts.get", "httpMethod" "GET", "scopes" ["https://www.googleapis.com/auth/blogger" "https://www.googleapis.com/auth/blogger.readonly"], "flatPath" "v3/blogs/{blogId}/posts/{postId}", "response" {"$ref" "Post"}, "parameters" {"view" {"enum" ["VIEW_TYPE_UNSPECIFIED" "READER" "AUTHOR" "ADMIN"], "enumDescriptions" ["" "" "" ""], "location" "query", "type" "string"}, "fetchBody" {"type" "boolean", "location" "query", "default" "true"}, "postId" {"location" "path", "required" true, "type" "string"}, "fetchImages" {"type" "boolean", "location" "query"}, "blogId" {"type" "string", "required" true, "location" "path"}, "maxComments" {"location" "query", "type" "integer", "format" "uint32"}}, "description" "Gets a post by blog id and post id", "parameterOrder" ["blogId" "postId"]}}}}, "description" "The Blogger API provides access to posts, comments and pages of a Blogger blog."}